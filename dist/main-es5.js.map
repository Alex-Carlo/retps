{"version":3,"sources":["webpack:///$_lazy_route_resources|lazy|groupOptions: {}|namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.effects.ts","webpack:///src/app/app.module.ts","webpack:///src/app/characters/character-details/character-details.component.html","webpack:///src/app/characters/character-details/character-details.component.ts","webpack:///src/app/characters/characters-list-table/characters-list-table.component.html","webpack:///src/app/characters/characters-list-table/characters-list-table.component.ts","webpack:///src/app/characters/characters-list/characters-list.component.ts","webpack:///src/app/characters/characters-list/characters-list.component.html","webpack:///src/app/characters/characters.service.ts","webpack:///src/app/loader/loader.service.ts","webpack:///src/app/movies/movie-detail/movie-detail.component.html","webpack:///src/app/movies/movie-detail/movie-detail.component.ts","webpack:///src/app/movies/movie.service.ts","webpack:///src/app/movies/movie/movie.component.ts","webpack:///src/app/movies/movie/movie.component.html","webpack:///src/app/movies/movies-list/movies-list.component.html","webpack:///src/app/movies/movies-list/movies-list.component.ts","webpack:///src/app/movies/movies.actions.ts","webpack:///src/app/movies/movies.effects.ts","webpack:///src/app/movies/movies.module.ts","webpack:///src/app/movies/movies.reducer.ts","webpack:///src/app/reducers/index.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","id","module","exports","routes","path","component","MoviesListComponent","MovieDetailComponent","CharactersListComponent","CharacterDetailsComponent","redirectTo","pathMatch","AppRoutingModule","RouterModule","relativeLinkResolution","AppComponent","AppEffects","actions$","AppModule","BrowserModule","BrowserAnimationsModule","MatToolbarModule","MatTableModule","MatCardModule","MatButtonModule","MatIconModule","StoreModule","reducers","metaReducers","environment","StoreDevtoolsModule","EffectsModule","MoviesModule","maxAge","logOnly","CharactersListTableComponent","height","mass","movieService","router","charactersService","store","films$","pipe","select","getCharacterMovies","character$","getCharacter","dispatch","FetchCharacter","FetchCharacterMovies","movie","selectedFilm","navigate","tableColumns","character","selectedCharacter","subscription","getCharactersList","subscribe","data","event","pageIndex","unsubscribe","CHARACTER_HTTP_URL_LENGTH","length","CharactersService","http","loaderService","pageNumber","startLoading","get","map","characters","finalize","finishLoading","film","forkJoin","characterUrl","getCharacterId","url","characterId","parseInt","substring","LoaderService","loadingCounter","film$","getMovie","characters$","getMovieCharacters","FetchMovie","FetchMovieCharacters","forEach","element","console","log","FILM_HTTP_URL_LENGTH","MovieService","baseUrl","options","params","filmsList","of","films","results","getFilmId","tap","filmUrl","movieId","MovieComponent","openMoviesDetails","movies$","getMovies","isLoading$","getIsLoading","FetchMovies","index","hero","title","type","FetchMoviesSuccess","payload","FetchMoviesError","FetchCharacterSuccess","FetchCharacterError","FetchCharacterMoviesSuccess","FetchCharacterMoviesError","FetchMovieSuccess","FetchMovieError","FetchMovieCharactersSuccess","FetchMovieCharactersError","ChangePage","MoviesEffects","service","fetch$","createEffect","ofType","withLatestFrom","switchMap","action","state","catchError","err","fetchCharacters$","getCharactersByFilm","fetchCharacterMovies$","getFilmsByCharacter","fetchMovie$","getFilm","fetchCharacter$","paginate$","CommonModule","HttpClientModule","FormsModule","MatProgressSpinnerModule","initialState","isLoading","error","selectedMovieCharacters","selectedMovie","selectedCharacterMovies","reducer","movies","getMoviesState","createFeatureSelector","createSelector","production","enableProdMode","platformBrowser","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 8255;\nmodule.exports = webpackEmptyAsyncContext;","import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport { MovieDetailComponent } from './movies/movie-detail/movie-detail.component';\nimport { CharactersListComponent } from './characters/characters-list/characters-list.component';\nimport { CharacterDetailsComponent } from './characters/character-details/character-details.component';\nimport { MoviesListComponent } from './movies/movies-list/movies-list.component';\n\nconst routes: Routes = [\n  {\n    path: 'movies',\n    component: MoviesListComponent\n\n  },\n  {\n    path: 'movies/:movieId',\n    component: MovieDetailComponent,\n  },\n  {\n    path: 'mov',\n    component: MovieDetailComponent,\n  },\n  \n  {path: 'characters', component: CharactersListComponent},\n  {path: 'characters/:characterId', component: CharacterDetailsComponent},\n  {\n    path: '**',\n    redirectTo: '/movies',\n    pathMatch:'full'\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { relativeLinkResolution: 'legacy' })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {\n}\n","import {Component, OnInit} from '@angular/core';\n// import { LoadingService } from './loading/loading.service';\n\n\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n \n})\nexport class AppComponent implements  OnInit {\n\n    constructor() {\n\n    }\n\n    ngOnInit() {\n\n\n    }\n \n  logout() {\n  }\n\n}\n","<mat-toolbar color=\"primary\">\n    <span>Star wars</span>\n  </mat-toolbar>\n  <router-outlet></router-outlet>\n\n\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect } from '@ngrx/effects';\n\n\n@Injectable()\nexport class AppEffects {\n\n  constructor(private actions$: Actions) {}\n}\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatToolbarModule} from '@angular/material/toolbar';\n\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { MoviesModule } from './movies/movies.module';\nimport { environment } from '../environments/environment';\nimport { metaReducers, reducers } from './reducers';\nimport { AppEffects } from './app.effects';\nimport { CharactersListComponent } from './characters/characters-list/characters-list.component';\nimport { CharactersListTableComponent } from './characters/characters-list-table/characters-list-table.component';\nimport { CharacterDetailsComponent } from './characters/character-details/character-details.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CharactersListComponent,\n    CharactersListTableComponent,\n    CharacterDetailsComponent,\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    AppRoutingModule,\n    MatToolbarModule,\n    MatTableModule,\n    \n    MatCardModule,\n    \n    MatButtonModule,\n    MatIconModule,\n    StoreModule.forRoot(reducers, { metaReducers }),\n    !environment.production ? StoreDevtoolsModule.instrument() : [],\n    EffectsModule.forRoot([AppEffects]),\n    MoviesModule,\n    StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: environment.production })\n  ],\n \n  providers: [\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {\n}\n","\n<a mat-button [routerLink]=\"['/movies']\" class=\"backButton\">\n  <mat-icon>arrow_back</mat-icon>\n  Back To Films List\n</a>\n<mat-card *ngIf=\"(character$ | async) as chac\">\n  <mat-card-header>\n    <mat-card-title>\n      {{chac.name }}\n    </mat-card-title>\n    <mat-card-subtitle>Gender :{{ chac.gender}}</mat-card-subtitle>\n  </mat-card-header>\n  <mat-card-content>\n    <!-- <p class=\"mat-body\">{{film.opening_crawl}}</p> -->\n    <mat-grid-list cols=\"5\" rowHeight=\"100px\">\n      <mat-grid-tile [colspan]=\"1\" [rowspan]=\"1\">\n        <span class=\"mat-body-strong\"> hair color: {{chac.hair_color}}</span>\n        <!-- <span class=\"mat-body\">{{film.episode_id}}</span> -->\n      </mat-grid-tile>\n      <mat-grid-tile [colspan]=\"1\" [rowspan]=\"1\">\n        <span class=\"mat-body-strong\"> height: {{chac.height}} </span>\n        <!-- <span class=\"mat-body\">{{film.release_date}}</span> -->\n      </mat-grid-tile>\n      <mat-grid-tile [colspan]=\"1\" [rowspan]=\"1\">\n        <span class=\"mat-body-strong\"> mass: {{chac.mass}} </span>\n        <!-- <span class=\"mat-body\">{{film.director}}</span> -->\n      </mat-grid-tile>\n      <mat-grid-tile [colspan]=\"1\" [rowspan]=\"1\">\n        <span class=\"mat-body-strong\"> skin color: {{chac.skin_color}} </span>\n        <!-- <span class=\"mat-body\">{{film.producer}}</span> -->\n      </mat-grid-tile>\n     \n    </mat-grid-list>\n    <h3 class=\"mat-h3\" >Films:</h3>\n    <div class=\"table-container\">\n      <div *ngFor=\"let item of films$ | async; trackBy: trackByUrl\"\n           [item]=\"item\">\n        <span (click)=\"openfilm(item)\"  class=\"filmsHover\">{{item.title}}</span>\n      </div>\n      <!-- <div *ngIf=\"(characters$ | async) as ch\"></div> -->\n      <!-- <app-characters-list-table [characters]=\"(characters$ | async)\"></app-characters-list-table> -->\n    </div>\n  </mat-card-content>\n</mat-card>","import {Component, OnInit} from '@angular/core';\nimport { getCharacter, getCharacterMovies, State } from '../../reducers';\nimport { CharactersService} from '../characters.service';\nimport { Character } from '../models/character';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { Movie } from '../../movies/models/movie';\nimport { FetchCharacter, FetchCharacterMovies } from '../../movies/movies.actions';\nimport { Router } from '@angular/router';\nimport { MovieService } from '../../movies/movie.service';\n@Component({\n  selector: 'app-character-details',\n  templateUrl: './character-details.component.html',\n  styleUrls: ['./character-details.component.scss']\n})\nexport class CharacterDetailsComponent implements OnInit {\n  films$: Observable<Movie[]> = this.store.pipe(select(getCharacterMovies));\n  character$: Observable<Character> = this.store.pipe(select(getCharacter));\n\n  constructor(public movieService: MovieService,private router: Router,public charactersService: CharactersService, private store: Store<State>,) {\n  }\n\n  ngOnInit() {\n    // this.character = this.charactersService.selectedCharacter;\n    // console.log(\"CharacterDetailsComponent\");\n    this.store.dispatch(new FetchCharacter());\n\n    this.store.dispatch(new FetchCharacterMovies());\n    // console.log(\"---------this.film:-----------\", this.films$);\n\n  }\n  openfilm(movie: Movie) {\n    // console.log(\"openMoviesDetails:\", movie);\n    this.movieService.selectedFilm = movie;\n    // console.log(\"movie.id:\", movie.id);\n\n\n    this.router.navigate(['/movies', movie.id]);\n  \n  }\n\n}\n","<table mat-table [dataSource]=\"characters\">\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef> Name</th>\n    <td mat-cell *matCellDef=\"let row\"> {{row.name}}</td>\n  </ng-container>\n  <ng-container matColumnDef=\"birth_year\">\n    <th mat-header-cell *matHeaderCellDef>Birth Year</th>\n    <td mat-cell *matCellDef=\"let row\">{{row.birth_year}}</td>\n  </ng-container>\n  <ng-container matColumnDef=\"height\">\n    <th mat-header-cell *matHeaderCellDef>Height</th>\n    <td mat-cell *matCellDef=\"let row\">{{row.height}}</td>\n  </ng-container>\n  <ng-container matColumnDef=\"mass\">\n    <th mat-header-cell *matHeaderCellDef>Mass</th>\n    <td mat-cell *matCellDef=\"let row\">{{row.mass}}</td>\n  </ng-container>\n  <ng-container matColumnDef=\"hair_color\">\n    <th mat-header-cell *matHeaderCellDef>Hair Color</th>\n    <td mat-cell *matCellDef=\"let row\">{{row.hair_color}}</td>\n  </ng-container>\n  <ng-container matColumnDef=\"skin_color\">\n    <th mat-header-cell *matHeaderCellDef>Skin Color</th>\n    <td mat-cell *matCellDef=\"let row\">{{row.skin_color}}</td>\n  </ng-container>\n  <ng-container matColumnDef=\"eye_color\">\n    <th mat-header-cell *matHeaderCellDef>Eye Color</th>\n    <td mat-cell *matCellDef=\"let row\">{{row.eye_color}}</td>\n  </ng-container>\n  <tr mat-header-row *matHeaderRowDef=\"tableColumns\"></tr>\n  <tr mat-row *matRowDef=\"let myRowData; columns: tableColumns\" (click)=\"showDetails(myRowData)\"></tr>\n</table>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {Router} from '@angular/router';\nimport { CharactersService} from '../characters.service';\nimport { Character } from '../models/character';\n\n@Component({\n  selector: 'app-characters-list-table',\n  templateUrl: './characters-list-table.component.html',\n  styleUrls: ['./characters-list-table.component.scss']\n})\nexport class CharactersListTableComponent {\n\n  @Input() characters: Character[];\n  tableColumns = ['name', 'birth_year', 'height', 'mass', 'hair_color', 'skin_color', 'eye_color'];\n\n  constructor(public charactersService: CharactersService,\n    private router: Router) {\n    // console.log(\"CharactersListTableComponent\");\n    \n  }\n\n  showDetails(character: Character) {\n    // console.log(\"-00000---character----00000---:\", character);\n    \n    this.charactersService.selectedCharacter = character;\n    // console.log(\" this.charactersService.selectedCharacter :\", this.charactersService.selectedCharacter );\n    \n    this.router.navigate(['/characters', character.id]);\n  }\n\n}\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport { CharactersService} from '../characters.service';\n// import {PageEvent} from '@angular/material';\nimport {Subscription} from 'rxjs';\nimport { Character } from '../models/character';\nimport { PageEvent } from '@angular/material/paginator';\n\n@Component({\n  selector: 'app-characters-list',\n  templateUrl: './characters-list.component.html',\n  styleUrls: ['./characters-list.component.scss']\n})\nexport class CharactersListComponent implements OnInit, OnDestroy {\n  characters: Character[];\n  charactersCount: number;\n  subscription: Subscription;\n\n  constructor(public charactersService: CharactersService) {\n  }\n\n  ngOnInit() {\n    this.subscription = this.charactersService.getCharactersList().subscribe(data => {\n      // this.characters = data.results;\n      // this.charactersCount = data.count;\n    });\n  }\n\n  pageData(event: PageEvent) {\n    this.subscription = this.charactersService.getCharactersList(event.pageIndex + 1).subscribe(data => {\n      // console.log(\"data:\",data);\n      \n      // this.characters = data;\n    });\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n}\n","<div class=\"container\">\n  <app-characters-list-table [characters]=\"characters\"></app-characters-list-table>\n \n</div>\n","import {HttpClient} from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {forkJoin, Observable} from 'rxjs';\nimport {finalize, map, tap} from 'rxjs/operators';\n\nimport {LoaderService} from '../loader/loader.service';\nimport { Movie, MoviesResponse } from '../movies/models/movie';\nimport { Character } from './models/character';\n\nconst CHARACTER_HTTP_URL_LENGTH = `https://swapi.dev/api/people/`.length;\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CharactersService {\n\n  selectedCharacter: Character;\n\n  constructor(private http: HttpClient, private loaderService: LoaderService) {\n  }\n\n  getCharactersList(pageNumber = 1): Observable<Character> {\n    this.loaderService.startLoading();\n    return this.http.get<Character>(`https://swapi.dev/api/people/?page=${pageNumber}`)\n      .pipe(map((characters => {\n        // console.log(\"--characters--:\",characters);\n        \n          // characters.forEach(character => {\n          //   character.id = this.getCharacterId(character.url);\n          // });\n          return characters;\n        }\n      )), finalize(() => this.loaderService.finishLoading()));\n  }\n\n  getCharactersByFilm(film: Movie) {\n    // console.log(\"getCharactersByFilm\");\n    \n    return forkJoin(film.characters.map(characterUrl => {\n      this.loaderService.startLoading();\n      // console.log(\"loaderService\");\n      \n      return this.http.get<Character>(characterUrl)\n        .pipe(map(character => {\n          \n          character.id = this.getCharacterId(character.url);\n          \n          // console.log(\"get character\",character);\n          return character;\n        }), finalize(() => this.loaderService.finishLoading()))\n    }));\n  }\n\n  \n\n  getCharacter(characterId: number): Observable<Character> {\n    this.loaderService.startLoading();\n    return this.http.get<Character>(`https://swapi.dev/api/people/${characterId}`)\n      .pipe(map(character => {\n        character.id = this.getCharacterId(character.url);\n        return character;\n      }), finalize(() => this.loaderService.finishLoading()));\n  }\n\n  private getCharacterId(characterUrl: string): number {\n    return parseInt(characterUrl.substring(CHARACTER_HTTP_URL_LENGTH, characterUrl.length - 1), 10);\n  }\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({providedIn: 'root'})\nexport class LoaderService {\n\n  loadingCounter = 0;\n\n  constructor() {\n  }\n\n  startLoading() {\n    this.loadingCounter++;\n  }\n\n  finishLoading() {\n    this.loadingCounter--;\n  }\n\n}\n","\n<a mat-button [routerLink]=\"['/movies']\" class=\"backButton\">\n  <mat-icon>arrow_back</mat-icon>\n  Back To Films List\n</a>\n<mat-card *ngIf=\"(film$ | async) as film\">\n  <mat-card-header>\n    <mat-card-title>\n     {{film.title }}\n    </mat-card-title>\n    <mat-card-subtitle>{{film.director}}</mat-card-subtitle>\n  </mat-card-header>\n  <mat-card-content>\n    <p class=\"mat-body\">{{film.opening_crawl}}</p>\n    <mat-grid-list cols=\"5\" rowHeight=\"100px\">\n      <mat-grid-tile [colspan]=\"1\" [rowspan]=\"1\">\n        <span class=\"mat-body-strong\"> Episode: </span>\n        <span class=\"mat-body\">{{film.episode_id}}</span>\n      </mat-grid-tile>\n      <mat-grid-tile [colspan]=\"1\" [rowspan]=\"1\">\n        <span class=\"mat-body-strong\"> Release Date: </span>\n        <span class=\"mat-body\">{{film.release_date}}</span>\n      </mat-grid-tile>\n      <mat-grid-tile [colspan]=\"1\" [rowspan]=\"1\">\n        <span class=\"mat-body-strong\"> Director: </span>\n        <span class=\"mat-body\">{{film.director}}</span>\n      </mat-grid-tile>\n      <mat-grid-tile [colspan]=\"1\" [rowspan]=\"1\">\n        <span class=\"mat-body-strong\"> Producer: </span>\n        <span class=\"mat-body\">{{film.producer}}</span>\n      </mat-grid-tile>\n      <mat-grid-tile [colspan]=\"1\" [rowspan]=\"1\">\n        <span class=\"mat-body-strong\"> # of Characters: </span>\n        <span class=\"mat-body\">{{film.characters.length}}</span>\n      </mat-grid-tile>\n    </mat-grid-list>\n    <h3 class=\"mat-h3\">Characters:</h3>\n    <div class=\"table-container\" >\n      <div *ngFor=\"let item of characters$ | async\">\n      <span (click)=\"openCharacterDetail(item)\" class=\"characterHover\">{{item.name}}</span> \n      </div>\n      <!-- <div *ngIf=\"(characters$ | async) as ch\"></div> -->\n      <!-- <app-characters-list-table [characters]=\"(characters$ | async)\"></app-characters-list-table> -->\n    </div>\n  </mat-card-content>\n</mat-card>\n<!-- <swapi-movie *ngFor=\"let movie of film$ | async\"\n           [movie]=\"movie\"></swapi-movie> -->\n\n  ","import { Component, NgModule, OnInit } from '@angular/core';\nimport { Movie } from '../models/movie';\nimport { MovieService } from '../movie.service';\nimport {  select, Store } from '@ngrx/store';\nimport { State } from '../movies.reducer';\nimport { Observable } from 'rxjs';\nimport { getMovie, getMovieCharacters } from '../../reducers';\nimport { map } from 'rxjs/operators';\nimport { FetchMovie, FetchMovieCharacters } from '../movies.actions';\nimport { Character } from '../../characters/models/character';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'movie-detail',\n  templateUrl: './movie-detail.component.html',\n  styleUrls: ['./movie-detail.component.scss']\n})\nexport class MovieDetailComponent implements OnInit {\n  film$: Observable<Movie>=this.store.pipe(select(getMovie));\n  characters$: Observable<Character[]> = this.store.pipe(select(getMovieCharacters));\n  constructor(public movieService: MovieService,\n    private store: Store<State>,\n    private router: Router) { }\n\n  ngOnInit(): void {\n    \n  \n    \n\n    this.store.dispatch(new FetchMovie());\n    \n    this.store.dispatch(new FetchMovieCharacters());\n    // console.log(\"---------this.film:-----------\", this.film$);\n   this.characters$.forEach(element => {\n    //  console.log(\"characters:\",element);\n     \n   });\n  }\n  openCharacterDetail(character: Character) {\n    console.log(\"character:\", character);\n    this.movieService.selectedCharacter = character;\n    this.router.navigate(['/characters/', character.id]);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { forkJoin, Observable, of } from 'rxjs';\n\nimport { Movie, MoviesResponse } from './models/movie';\nimport { finalize, map, tap } from 'rxjs/operators';\nimport { LoaderService } from '../loader/loader.service';\nimport { Character } from '../characters/models/character';\n\n\nconst FILM_HTTP_URL_LENGTH = `'https://swapi.dev/api/films/`.length;\n\n@Injectable()\nexport class MovieService {\n  private readonly baseUrl = 'https://swapi.dev/api';\n\n  filmsList: Movie[];\n  selectedFilm: Movie;\n  selectedCharacter: Character;\n\n  constructor(private http: HttpClient,private loaderService: LoaderService) {}\n\n  getMovies(): Observable<Movie[]>{\n    const options = {\n      params: {}\n    };\n    // const link = `${this.baseUrl}films/`;\n\n    // if (page) {\n    //   options.params = { page };\n    // };\n\n    // return this.http.get<MoviesResponse>(link, options);\n    if (this.filmsList) {\n      return of(this.filmsList);\n    } else {\n      // this.loaderService.startLoading();\n      return this.http.get<MoviesResponse>(`${this.baseUrl}/films`,options)\n        .pipe(map((films => films.results.map(film => {\n              film.id = this.getFilmId(film.url);\n              return film;\n            })\n          )),\n          tap(films => this.filmsList = films),\n          finalize(() => this.loaderService.finishLoading()));\n    }\n  }\n \n  // searchForMovie(lookup: string): Observable<MoviesResponse> {\n  //   const link = `${this.baseUrl}films/`;\n  //   const options = {\n  //     params: {\n  //       search: lookup\n  //     }\n  //   };\n\n  //   return this.http.get<MoviesResponse>(link, options);\n  // }\n  \n  getFilmsByCharacter(character: Character) {\n    \n    return forkJoin(character.films.map(filmUrl => {\n        this.loaderService.startLoading();\n        return this.http.get<Movie>(filmUrl)\n          .pipe(map(film => {\n            film.id = this.getFilmId(film.url);\n            \n            return film;\n          }), finalize(() => this.loaderService.finishLoading()));\n      }\n    ));\n  }\n\n  getFilm(movieId: number): Observable<Movie> {\n    this.loaderService.startLoading();\n    // console.log(\"getFilm filmId:\",movieId);\n    \n    return this.http.get<Movie>(`${this.baseUrl}/films/${movieId}`)\n      .pipe(map(film => {\n        \n        film.id = this.getFilmId(film.url);\n        return film;\n      }), finalize(() => this.loaderService.finishLoading()));\n  }\n\n  private getFilmId(filmUrl: string): number {\n    return parseInt(filmUrl.substring(FILM_HTTP_URL_LENGTH, filmUrl.length - 2), 10);\n  }\n}\n","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { Movie } from '../models/movie';\nimport { MovieService } from '../movie.service';\n\n@Component({\n  selector: 'swapi-movie',\n  templateUrl: './movie.component.html',\n  styleUrls: ['./movie.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MovieComponent {\n  @Input() movie: Movie;\n  constructor(public MovieService: MovieService,\n    private router: Router){}\n\n  openMoviesDetails(movie:Movie){\n    // console.log(\"openMoviesDetails:\",movie);\n    this.MovieService.selectedFilm = movie;\n  // console.log(\"movie.id:\",movie.id);\n  \n    \n    this.router.navigate(['/movies', movie.id]);\n  }\n}\n","\n<mat-card (click)=\"openMoviesDetails(movie)\" style=\"margin: 10px;\">\n  <mat-card-header>\n      <mat-card-title><strong>Movie: \"{{ movie.title }}---Episodio: {{movie.episode_id}}-- Director: {{movie.director}}\"</strong></mat-card-title>\n\n  </mat-card-header>\n  <mat-card-content>\n    <!-- <p>\n      Director: <strong>{{ hero.director }}</strong>\n    </p>\n    <p>\n      Producer: <strong>{{hero.producer}}</strong>\n    </p> -->\n    <!-- <p>\n      Gender: <strong>{{ hero.gender }}</strong>\n    </p>\n\n    <p>\n      Hair:  <strong>{{ hero.hair_color }}</strong>\n    </p>\n    <p>\n      Height: <strong>{{ hero.height }}cm</strong>\n    </p>\n    <p>\n      Weight: <strong>{{ hero.mass }}kg</strong>\n    </p> -->\n  </mat-card-content>\n</mat-card>\n","\n<swapi-movie class=\"flex-container\" *ngFor=\"let movie of movies$ | async; trackBy: trackByUrl\"\n           [movie]=\"movie\"></swapi-movie>\n\n<div class=\"loader__bg\" *ngIf=\"isLoading$ | async\">\n  <mat-spinner\n    class=\"loader\"\n    color=\"accent\"\n    mode=\"indeterminate\"\n    [diameter]=\"40\"\n    [value]=\"25\"></mat-spinner>\n</div>\n\n","import {\n  Component,\n  OnInit,\n  ChangeDetectionStrategy\n} from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { State } from '../movies.reducer';\nimport { FetchMovies, ChangePage, Pagination } from '../movies.actions';\nimport {\n  getMovies,\n  getIsLoading,\n\n  // getIsFirstPage,\n  // getIsLastPage\n} from '../../reducers/index';\nimport { Movie } from '../models/movie';\n\n@Component({\n  selector: 'swapi-movies-list',\n  templateUrl: './movies-list.component.html',\n  styleUrls: ['./movies-list.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MoviesListComponent implements OnInit {\n  movies$: Observable<Movie[]> = this.store.pipe(select(getMovies));\n  isFirst$: Observable<boolean>;\n  isLast$: Observable<boolean>;\n  isLoading$: Observable<boolean>;\n\n  constructor(private store: Store<State>) {}\n\n  ngOnInit() {\n    // console.log(\"---movies---:\",this.movies$);\n    \n    // this.isFirst$ = this.store.select(getIsFirstPage);\n    // this.isLast$ = this.store.select(getIsLastPage);\n    this.isLoading$ = this.store.select(getIsLoading);\n\n    this.store.dispatch(new FetchMovies());\n  }\n\n\n\n  trackByUrl(index: number, hero: Movie): string {\n    return hero.title;\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { Movie, MoviesResponse } from './models/movie';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nexport const enum MoviesActionTypes {\n\n  FetchMovies = '[Movies] Fetch Movies',\n  FetchMoviesSuccess = '[Movies] Load Movies Success',\n  FetchMoviesError = '[Movies] Load Movies Error',\n\n  ChangePage = '[Movies] Change page',\n  FetchMovieCharacters = '[Movie] Fetch Movie Characters',\n  FetchMovieCharactersSuccess = `[Movie] Load Movie Characters Success`,\n  FetchMovieCharactersError = '[Movie] Load Movie Characters Error',\n  FetchMovie = '[Movie] Fetch Movie ',\n  FetchMovieSuccess = `[Movie] Load Movie Success`,\n  FetchMovieError = '[Movie] Load Movie Error',\n\n  FetchCharacter = '[Character] Fetch Character ',\n  FetchCharacterSuccess = `[Character] Load Character Success`,\n  FetchCharacterError = '[Character] Load Character Error',\n\n  FetchCharacterMovies = '[Character] Fetch Character Movies ',\n  FetchCharacterMoviesSuccess = `[Character] Load Character Movies Success`,\n  FetchCharacterMoviesError = '[Character] Load Character Movies Error',\n\n}\n\nexport const enum Pagination {\n  NEXT,\n  PREV\n}\n\nexport class FetchMovies implements Action {\n  readonly type = MoviesActionTypes.FetchMovies;\n}\n\nexport class FetchMoviesSuccess implements Action {\n  readonly type = MoviesActionTypes.FetchMoviesSuccess;\n\n  constructor(public payload: Movie[]) { }\n}\n\nexport class FetchMoviesError implements Action {\n  readonly type = MoviesActionTypes.FetchMoviesError;\n\n  constructor(public payload: HttpErrorResponse) { }\n}\nexport class FetchMovie implements Action {\n  readonly type = MoviesActionTypes.FetchMovie;\n  constructor() {\n    // console.log(\"*************FetchMovie*************\");\n\n  }\n}\n\nexport class FetchCharacterSuccess implements Action {\n  readonly type = MoviesActionTypes.FetchCharacterSuccess;\n\n  constructor(public payload: any) {\n    // console.log(\"FetchMovieSuccess\");\n\n  }\n}\n\nexport class FetchCharacterError implements Action {\n  readonly type = MoviesActionTypes.FetchCharacterError;\n\n  constructor(public payload: HttpErrorResponse) { }\n}\n\nexport class FetchCharacter implements Action {\n  readonly type = MoviesActionTypes.FetchCharacter;\n  constructor() {\n    // console.log(\"*************FetchCharacter*************\");\n\n  }\n}\nexport class FetchCharacterMoviesSuccess implements Action {\n  readonly type = MoviesActionTypes.FetchCharacterMoviesSuccess;\n\n  constructor(public payload: any) {\n    // console.log(\"```````````````FetchCharacterMoviesSuccess````````````````\");\n\n  }\n}\n\nexport class FetchCharacterMoviesError implements Action {\n  readonly type = MoviesActionTypes.FetchCharacterMoviesError;\n\n  constructor(public payload: HttpErrorResponse) { }\n}\n\nexport class FetchCharacterMovies implements Action {\n  readonly type = MoviesActionTypes.FetchCharacterMovies;\n  constructor() {\n    // console.log(\"*************FetchCharacter*************\");\n\n  }\n}\nexport class FetchMovieSuccess implements Action {\n  readonly type = MoviesActionTypes.FetchMovieSuccess;\n\n  constructor(public payload: any) {\n    // console.log(\"FetchMovieSuccess\");\n\n  }\n}\n\nexport class FetchMovieError implements Action {\n  readonly type = MoviesActionTypes.FetchMovieError;\n\n  constructor(public payload: HttpErrorResponse) { }\n}\n\nexport class FetchMovieCharacters implements Action {\n  readonly type = MoviesActionTypes.FetchMovieCharacters;\n}\n\nexport class FetchMovieCharactersSuccess implements Action {\n  readonly type = MoviesActionTypes.FetchMovieCharactersSuccess;\n\n\n  constructor(public payload: any) {\n    // console.log(\"FetchMovieCharactersSuccess\");\n  }\n}\n\nexport class FetchMovieCharactersError implements Action {\n  readonly type = MoviesActionTypes.FetchMovieCharactersError;\n\n  constructor(public payload: HttpErrorResponse) { }\n}\n\n\n\nexport class ChangePage implements Action {\n  readonly type = MoviesActionTypes.ChangePage;\n\n  constructor(public payload: Pagination) { }\n}\n\nexport type MoviesActions = FetchMovieCharacters\n  | FetchMovieCharactersSuccess\n  | FetchMovieCharactersError\n  | FetchMovies\n  | FetchMoviesSuccess\n  | FetchMoviesError\n  | FetchMovie\n  | FetchMovieSuccess\n  | FetchMovieError\n  | FetchCharacter\n  | FetchCharacterSuccess\n  | FetchCharacterError\n  | FetchCharacterMovies\n  | FetchCharacterMoviesSuccess\n  | FetchCharacterMoviesError\n  | ChangePage;\n","import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\n// import { getCurrentPage } from '../reducers/index';\nimport { State } from './movies.reducer';\nimport { MovieService } from './movie.service';\nimport {\n  MoviesActionTypes,\n  MoviesActions,\n  FetchMovies,\n  FetchMoviesSuccess,\n  FetchMoviesError,\n  FetchMovieCharactersSuccess,\n  FetchMovieCharactersError,\n  FetchMovieError,\n  FetchMovieSuccess,\n  FetchCharacterError,\n  FetchCharacterSuccess,\n  FetchCharacterMoviesSuccess,\n  FetchCharacterMoviesError\n} from './movies.actions';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, catchError, withLatestFrom } from 'rxjs/operators';\nimport { CharactersService } from '../characters/characters.service';\nimport { Movie } from './models/movie';\n\n@Injectable()\nexport class MoviesEffects {\n\n  fetch$ = createEffect(() => {\n    return this.actions$\n      .pipe(\n        ofType(MoviesActionTypes.FetchMovies),\n        withLatestFrom(this.store),\n        switchMap(([action, state]) =>\n          this.service.getMovies().pipe(\n            map(data => new FetchMoviesSuccess(data)),\n            catchError(err => of(new FetchMoviesError(err)))\n          )\n        )\n      )\n  });\n  fetchCharacters$ = createEffect(() => {\n    return this.actions$\n      .pipe(\n        ofType(MoviesActionTypes.FetchMovieCharacters),\n        withLatestFrom(this.store),\n        switchMap(([action, state]) =>\n\n          this.charactersService.getCharactersByFilm(this.service.selectedFilm).pipe(\n            catchError(err => of(new FetchMovieCharactersError(err))),\n            map(data =>\n\n              new FetchMovieCharactersSuccess(data)\n              // (characters: Movie['charactersData']) => {\n              // console.log(\"characters:\", characters);\n              // // this.movieService.selectedFilm.charactersData=[];\n              // console.log(\"this.movieService.selectedFilm.charactersData:\", this.movieService.selectedFilm.charactersData);\n\n\n              // //  this.movieService.selectedFilm.charactersData = characters;\n              // return true;\n              // }\n            )\n          )\n        ))\n  });\n\n  fetchCharacterMovies$ =  createEffect(() => {\n    return this.actions$\n      .pipe(\n        ofType(MoviesActionTypes.FetchCharacterMovies),\n        withLatestFrom(this.store),\n        switchMap(([action, state]) =>\n\n          this.service.getFilmsByCharacter(this.service.selectedCharacter).pipe(\n            catchError(err => of(new FetchCharacterMoviesError(err))),\n            map(data =>\n\n              new FetchCharacterMoviesSuccess(data)\n              // (characters: Movie['charactersData']) => {\n              // console.log(\"characters:\", characters);\n              // // this.movieService.selectedFilm.charactersData=[];\n              // console.log(\"this.movieService.selectedFilm.charactersData:\", this.movieService.selectedFilm.charactersData);\n\n\n              // //  this.movieService.selectedFilm.charactersData = characters;\n              // return true;\n              // }\n            )\n          )\n        ))\n  });\n\n  fetchMovie$ = createEffect(() => {\n    return this.actions$\n      .pipe(\n        ofType(MoviesActionTypes.FetchMovie),\n        withLatestFrom(this.store),\n        switchMap(([action, state]) =>\n          this.service.getFilm(this.service.selectedFilm.id).pipe(\n            catchError(err => of(new FetchMovieError(err))),\n            map(data =>\n\n              new FetchMovieSuccess(data)\n              // (characters: Movie['charactersData']) => {\n              // console.log(\"characters:\", characters);\n              // // this.movieService.selectedFilm.charactersData=[];\n              // console.log(\"this.movieService.selectedFilm.charactersData:\", this.movieService.selectedFilm.charactersData);\n\n\n              // //  this.movieService.selectedFilm.charactersData = characters;\n              // return true;\n              // }\n            )\n          )\n        ))\n  });\n  // this.service.getMovies().pipe(\n  //   map(data =>\n  //     new FetchMovieCharactersSuccess(data)\n  //   ),\n  //   catchError(err => of(new FetchMovieCharactersError(err)))\n  // )\n  //   )\n  // );\n  fetchCharacter$ = createEffect(() => {\n    return this.actions$\n      .pipe(\n        ofType(MoviesActionTypes.FetchCharacter),\n        withLatestFrom(this.store),\n        switchMap(([action, state]) =>\n          this.charactersService.getCharacter(this.service.selectedCharacter.id).pipe(\n            catchError(err => of(new FetchCharacterError(err))),\n            map(data =>\n\n              new FetchCharacterSuccess(data)\n            )\n          )\n        ))\n  });\n  paginate$ = createEffect(() => {\n    return this.actions$\n      .pipe(\n        ofType(MoviesActionTypes.ChangePage),\n        map(() => new FetchMovies())\n      )\n  });\n\n  constructor(private actions$: Actions,\n    private store: Store<State>,\n    private service: MovieService,\n    private charactersService: CharactersService) { }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\n\nimport { MoviesListComponent } from './movies-list/movies-list.component';\nimport { MovieComponent } from './movie/movie.component';\nimport { MovieService } from './movie.service';\nimport { EffectsModule } from '@ngrx/effects';\nimport { MoviesEffects } from './movies.effects';\nimport { MovieDetailComponent } from './movie-detail/movie-detail.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    FormsModule,\n    MatCardModule,\n    \n    MatButtonModule,\n    MatIconModule,\n    MatProgressSpinnerModule,\n    RouterModule,\n    EffectsModule.forFeature([MoviesEffects])\n  ],\n  declarations: [\n    MoviesListComponent,\n    MovieComponent,\n    MovieDetailComponent,\n  ],\n  providers: [\n    MovieService\n  ],\n  exports: [\n    MoviesListComponent\n  ]\n})\nexport class MoviesModule {}\n","import { Action } from '@ngrx/store';\nimport { MoviesActions, MoviesActionTypes, Pagination } from './movies.actions';\nimport { Movie } from './models/movie';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { Character } from '../characters/models/character';\n\nexport interface State {\n  isLoading: boolean;\n  error: HttpErrorResponse | null;\n  data: Movie[] | null;\n  selectedMovieCharacters: [] | null;\n  selectedMovie:Movie| null;\n  selectedCharacterMovies: [] | null;\n  selectedCharacter: Character | null;\n\n  // next: string | null;\n  // previous: string | null;\n  \n}\n\nexport const initialState: State = {\n  isLoading: false,\n  error: null,\n  data: [],\n  selectedMovieCharacters:[],\n  selectedMovie: null,\n\n  selectedCharacter: null,\n  selectedCharacterMovies:[]\n  \n  \n  // next: null,\n  // previous: null,\n\n};\n\nexport function reducer(state = initialState, action: MoviesActions): State {\n  switch (action.type) {\n\n    case MoviesActionTypes.FetchMovies:\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n\n    case MoviesActionTypes.FetchMoviesSuccess:\n      return {\n        ...state,\n        isLoading: false,\n        data: action.payload,\n        // next: action.payload.next,\n        // previous: action.payload.previous\n      };\n\n    case MoviesActionTypes.FetchMoviesError:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload\n      };\n      case MoviesActionTypes.FetchMovie:\n        return {\n          ...state,\n          isLoading: true,\n          error: null\n        };\n  \n      case MoviesActionTypes.FetchMovieSuccess:\n        return {\n          ...state,\n          isLoading: false,\n          selectedMovie: action.payload,\n          // next: action.payload.next,\n          // previous: action.payload.previous\n        };\n  \n      case MoviesActionTypes.FetchMovieError:\n        return {\n          ...state,\n          isLoading: false,\n          error: action.payload\n        };\n    \n    case MoviesActionTypes.FetchCharacter:\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n\n    case MoviesActionTypes.FetchCharacterSuccess:\n      return {\n        ...state,\n        isLoading: false,\n        selectedCharacter: action.payload,\n        // next: action.payload.next,\n        // previous: action.payload.previous\n      };\n\n    case MoviesActionTypes.FetchCharacterError:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload\n      };\n    \n    case MoviesActionTypes.FetchCharacterMovies:\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n\n    case MoviesActionTypes.FetchCharacterMoviesSuccess:\n      return {\n        ...state,\n        isLoading: false,\n        selectedCharacterMovies: action.payload,\n        // next: action.payload.next,\n        // previous: action.payload.previous\n      };\n\n    case MoviesActionTypes.FetchCharacterMoviesError:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload\n      };\n    \n    case MoviesActionTypes.FetchMovieCharacters:\n      return {\n        ...state,\n        isLoading: true,\n        error: null\n      };\n\n    case MoviesActionTypes.FetchMovieCharactersSuccess:\n      return {\n        ...state,\n        isLoading: false,\n        selectedMovieCharacters: action.payload,\n        // next: action.payload.next,\n        // previous: action.payload.previous\n      };\n\n\n    case MoviesActionTypes.FetchMovieCharactersError:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload\n      };\n\n    // case MoviesActionTypes.ChangePage:\n    //   return {\n    //     ...state,\n    //     page: action.payload === Pagination.NEXT ? ++state.page : --state.page\n    //   };\n\n    default:\n      return state;\n  }\n}\n","import {\n  ActionReducerMap,\n  createFeatureSelector,\n  createSelector,\n  MetaReducer\n} from '@ngrx/store';\nimport { environment } from '../../environments/environment';\nimport * as fromMovies from '../movies/movies.reducer';\n\nexport interface State {\n  movies: fromMovies.State;\n}\n\nexport const reducers: ActionReducerMap<State> = {\n  movies: fromMovies.reducer,\n};\n\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\n\nexport const getMoviesState = createFeatureSelector<fromMovies.State>('movies');\nexport const getMovies = createSelector(getMoviesState, state => state.data);\nexport const getIsLoading = createSelector(getMoviesState, state => state.isLoading);\nexport const getMovieCharacters = createSelector(getMoviesState, state => state.selectedMovieCharacters);\nexport const getMovie = createSelector(getMoviesState, state => state.selectedMovie);\nexport const getCharacterMovies = createSelector(getMoviesState, state => state.selectedCharacterMovies);\nexport const getCharacter = createSelector(getMoviesState, state => state.selectedCharacter);\n\n// export const getCurrentPage = createSelector(getMoviesState, state => state.page);\n// export const getIsFirstPage = createSelector(getMoviesState, state => !state.previous);\n// export const getIsLastPage = createSelector(getMoviesState, state => !state.next);\n","\n\nexport const environment = {\n  production: false\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\n\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"]}